# CIVILIAN 
    /* Returns a list of Civilians */
    public ArrayList<Civilian> ArrayOfCivilians(String operator) throws SQLException, ClassNotFoundException {
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        ResultSet res;
        ArrayList<Civilian> civilians = new ArrayList<>();
        try {
            switch (operator) {
                //Handle question
                case "state1":
                    //Debt free civilians (amount_due == 0)
                    res = stmt.executeQuery("SELECT * FROM civilians WHERE amount_due= '" + 0 + "'");
                    break;
                case "state2":
                    //Debt civilians (amount_due > 0)
                    res = stmt.executeQuery("SELECT * FROM civilians WHERE amount_due> '" + 0 + "'");
                    break;
                default:
                    //All civilians
                    res = stmt.executeQuery("SELECT * FROM civilians");
                    break;
            }
            while (res.next()) {
                //Convert database result set to JSON
                String json = Database_Connection.getResultsToJSON(res);
                //Define JSON Object
                Gson gson = new Gson();
                //Generate Civilian object from JSON and add it to the arrayList
                civilians.add(gson.fromJson(json, Civilian.class));
            }
            return civilians;
        } catch (JsonSyntaxException | SQLException e) {
            System.err.println(e.getMessage());
        }
        return null;
    }

    /*Update values of Civilian*/
    public void updateCivilian(String name,double owed, double balance) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE civilians SET amount_due='"+owed+"', available_balance ='"+balance+"' WHERE name = '"+name+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /*Update values of Civilian*/
    public void updateCivilianCredit(String name,double owed, double credit_limit) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE civilians SET amount_due='"+owed+"', credit_limit ='"+credit_limit+"' WHERE name = '"+name+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /*Update values of Civilian balance only*/
    public void updateCivilian(String name, double balance) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE civilians SET available_balance ='"+balance+"' WHERE name = '"+name+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /*Update values of Civilian credit only*/
    public void updateCivilianCredit(String name, double credit_limit) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE civilians SET credit_limit ='"+credit_limit+"' WHERE name = '"+name+"'";
        stmt.executeUpdate(update);
        con.close();
    }

# COMPANY

public ArrayList<Company> ArrayOfCompanies(String operator) throws SQLException, ClassNotFoundException {
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        ResultSet res;
        ArrayList<Company> companies = new ArrayList<>();
        try {
            switch (operator) {
                //Handle question
                case "state1":
                    //Debt free companies (amount_due == 0)
                    res = stmt.executeQuery("SELECT * FROM companies WHERE amount_due= '" + 0 + "'");
                    break;
                case "state2":
                    //Debt companies (amount_due > 0)
                    res = stmt.executeQuery("SELECT * FROM companies WHERE amount_due> '" + 0 + "'");
                    break;
                default:
                    //All companies
                    res = stmt.executeQuery("SELECT * FROM companies");
                    break;
            }
            while (res.next()) {
                //Convert database result set to JSON
                String json = Database_Connection.getResultsToJSON(res);
                //Define JSON Object
                Gson gson = new Gson();
                //Generate Company object from JSON and add it to the arrayList
                companies.add(gson.fromJson(json, Company.class));
            }
            return companies;
        } catch (JsonSyntaxException | SQLException e) {
            System.err.println(e.getMessage());
        }
        return null;
    }

    /*Update values of company*/
    public void updateCompany(String name,double owed, double balance) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE companies SET amount_due='"+owed+"', available_balance ='"+balance+"' WHERE name = '"+name+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /*Update values of company balance only*/
    public void updateCompany(String name, double balance) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE companies SET  available_balance ='"+balance+"' WHERE name = '"+name+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /*Update values of company*/
    public void updateCompanyCredit(String name,double owed, double credit_limit) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE companies SET amount_due='"+owed+"', credit_limit ='"+credit_limit+"' WHERE name = '"+name+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /*Update values of company balance only*/
    public void updateCompanyCredit(String name, double credit_limit) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE companies SET  credit_limit ='"+credit_limit+"' WHERE name = '"+name+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /* Returns a Company if exists in Database, else null */
    public Company databaseToCompany(String name) throws ClassNotFoundException, SQLException {
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        ResultSet rs;
        try {
            rs = stmt.executeQuery("SELECT * FROM companies WHERE name = '" + name + "'");
            rs.next();
            String json = Database_Connection.getResultsToJSON(rs);
            Gson gson = new Gson();
            Company com = gson.fromJson(json, Company.class);
            return com;
        } catch (JsonSyntaxException | SQLException e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        return null;
    }

    /* Returns a Company if exists in Database, else null (accountNumberSearch) */
    public Company accountNumberSearch(String account_number) throws ClassNotFoundException, SQLException {
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        ResultSet rs;
        try {
            rs = stmt.executeQuery("SELECT * FROM companies WHERE account_number = '" +account_number+ "'");
            rs.next();
            String json = Database_Connection.getResultsToJSON(rs);
            Gson gson = new Gson();
            Company com = gson.fromJson(json, Company.class);
            return com;
        } catch (JsonSyntaxException | SQLException e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        return null;
    }

    /*Delete Company from Company Table*/
    public void deleteCompany(String name) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String deleteQuery = "DELETE FROM companies WHERE name='" + name + "'";
        stmt.executeUpdate(deleteQuery);
        System.out.println("# The company was successfully deleted from the database.");
        stmt.close();
        con.close();
    }

# EMPLOYEE

public ArrayList<Employee> ArrayOfEmployees(String operator) throws SQLException, ClassNotFoundException {
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        ResultSet res;
        ArrayList<Employee> employees = new ArrayList<>();
        try {
            switch (operator) {
                //Handle question
                case "state1":
                    //Debt free employees (amount_due == 0)
                    res = stmt.executeQuery("SELECT * FROM employees WHERE amount_due= '" + 0 + "'");
                    break;
                case "state2":
                    //Debt employees (amount_due > 0)
                    res = stmt.executeQuery("SELECT * FROM employees WHERE amount_due> '" + 0 + "'");
                    break;
                default:
                    //All employees
                    res = stmt.executeQuery("SELECT * FROM employees");
                    break;
            }
            while (res.next()) {
                //Convert database result set to JSON
                String json = Database_Connection.getResultsToJSON(res);
                //Define JSON Object
                Gson gson = new Gson();
                //Generate Employee object from JSON and add it to the arrayList
                employees.add(gson.fromJson(json, Employee.class));
            }
            return employees;
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
        return null;
    }

    /*Update values of Employee*/
    public void updateEmployee(String name,double owed, double balance) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE employees SET amount_due='"+owed+"', available_balance ='"+balance+"' WHERE name = '"+name+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /*Update values of Employee*/
    public void updateEmployeeCredit(String name,double owed, double credit_limit) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE employees SET amount_due='"+owed+"', credit_limit ='"+credit_limit+"' WHERE name = '"+name+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /*Update values of Employee*/
    public void updateEmployeePayment(String account_number,double owed, double balance) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE employees SET amount_due='"+owed+"', available_balance ='"+balance+"' WHERE account_number = '"+account_number+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /*Update values of Employee balance only*/
    public void updateEmployee(String name, double balance) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE employees SET available_balance ='"+balance+"' WHERE name = '"+name+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /*Update values of Employee credit only*/
    public void updateEmployeeCredit(String name, double credit_limit) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE employees SET credit_limit ='"+credit_limit+"' WHERE name = '"+name+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /*Update values of Employee balance only from Account Number*/
    public void updateFromAccountNum(String account_number,double owed, double balance) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE employees SET available_balance ='"+balance+"', amount_due ='"+owed+"' WHERE account_number = '"+account_number+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /*Update values of Employee creditLimit only from Account Number*/
    public void updateFromAccountNumCredit(String account_number,double owed, int creditLimit) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE employees SET credit_limit ='"+creditLimit+"', amount_due ='"+owed+"' WHERE account_number = '"+account_number+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /* Returns a Employee if exists in Database, else null */
    public Employee databaseToEmployee(String name) throws ClassNotFoundException, SQLException {
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        ResultSet rs;
        try {
            rs = stmt.executeQuery("SELECT * FROM employees WHERE name = '" + name + "'");
            rs.next();
            String json = Database_Connection.getResultsToJSON(rs);
            Gson gson = new Gson();
            Employee emp = gson.fromJson(json, Employee.class);
            return emp;
        } catch (JsonSyntaxException | SQLException e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        return null;
    }


    public void deleteEmployee(String name) throws ClassNotFoundException, SQLException {
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        try {
            stmt.executeUpdate("DELETE FROM employees WHERE name = '" + name + "'");
            System.out.println("Employee with name: " + name + " has been deleted!");
        } catch (JsonSyntaxException | SQLException e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        stmt.close();
        con.close();
    }

# MERCHANT
   
    private double calculateReduction(double amount_due) {
        double new_amount_due;
        if (amount_due > 0) {
            //5 mean 5% reduction
            new_amount_due = ((100 - 5) * amount_due) / 100;
            return new_amount_due;
        } else {
            return amount_due;
        }
    }

    public void updateBestMerchant(String name) throws ClassNotFoundException, SQLException {
        ResultSet res;
        String updateQuery;
        Double merchantAmmountDue;
        try (Connection con = Database_Connection.getConnection(); Statement stmt = con.createStatement()) {

            res = stmt.executeQuery("SELECT * FROM merchants WHERE name= '" + name + "'");

            if (res.next()) {
                merchantAmmountDue = calculateReduction(res.getDouble("amount_due"));
                updateQuery = "UPDATE merchants SET amount_due='"
                        + merchantAmmountDue
                        + "' WHERE name='" + name + "'";
                stmt.executeUpdate(updateQuery);
            }
        } catch (SQLException e) {
            System.err.println("Got an exception, in updateBestMerchant()");
            System.err.println(e.getMessage());
        }
    }

    public ArrayList<Merchant> ArrayOfMerchants(String operator) throws SQLException, ClassNotFoundException {
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        ResultSet res;
        ArrayList<Merchant> merchants = new ArrayList<>();
        try {
            switch (operator) {
                //Handle question
                case "state1":
                    //Debt free merchants (amount_due == 0)
                    res = stmt.executeQuery("SELECT * FROM merchants WHERE amount_due= '" + 0 + "'");
                    break;
                case "state2":
                    //Debt merchants (amount_due > 0)
                    res = stmt.executeQuery("SELECT * FROM merchants WHERE amount_due> '" + 0 + "'");
                    break;
                default:
                    //All merchants
                    res = stmt.executeQuery("SELECT * FROM merchants");
                    break;
            }
            while (res.next()) {
                //Convert database result set to JSON
                String json = Database_Connection.getResultsToJSON(res);
                //Define JSON Object
                Gson gson = new Gson();
                //Generate Merchant object from JSON and add it to the arrayList
                merchants.add(gson.fromJson(json, Merchant.class));
            }
            return merchants;
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
        return null;
    }

    /*Update values of Merchant (payment)*/
    public void updateMerchant(String name, double owed, double total_profit) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE merchants SET amount_due='"+owed+"', total_profit='"+total_profit+"' WHERE name = '"+name+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /*Update values of Merchant total profit only*/
    public void updateMerchant(String name, double total_profit) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE merchants SET  total_profit='"+total_profit+"' WHERE name = '"+name+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /* Returns a Merchant if exists in Database, else null */
    public Merchant databaseToMerchant(String name) throws ClassNotFoundException, SQLException {
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        ResultSet rs;
        try {
            rs = stmt.executeQuery("SELECT * FROM merchants WHERE name = '" + name + "'");
            rs.next();
            String json = Database_Connection.getResultsToJSON(rs);
            Gson gson = new Gson();
            Merchant mer = gson.fromJson(json, Merchant.class);
            return mer;
        } catch (JsonSyntaxException | SQLException e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        return null;
    }

    /*Deletes merchant from Merchant Table*/
    public void deleteMerchant(String name) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String deleteQuery = "DELETE FROM merchants WHERE name='" + name + "'";
        stmt.executeUpdate(deleteQuery);
        System.out.println("# The merchant was successfully deleted from the database.");
        stmt.close();
        con.close();
    }

# TRANSACTION

    private String findBestTrader(String[] array) {
        List<String> list = Arrays.asList(array);
        Map<String, Integer> stringsCount = new HashMap<>();
        for (String string : list) {
            if (string.length() > 0) {
                string = string.toLowerCase();
                Integer count = stringsCount.get(string);
                if (count == null) {
                    count = 0;
                }
                count++;
                stringsCount.put(string, count);
            }
        }
        Map.Entry<String, Integer> mostRepeated = null;
        for (Map.Entry<String, Integer> e : stringsCount.entrySet()) {
            if (mostRepeated == null || mostRepeated.getValue() < e.getValue()) {
                mostRepeated = e;
            }
        }
        try {
            return mostRepeated.getKey();
        } catch (NullPointerException e) {
            return null;
        }
    }

    public String traderOfMonth(String traderDate) throws ClassNotFoundException, SQLException {
        ResultSet res;
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String transactionDate, bestTrader = null;
        String[] merchantsNamesArray;
        ArrayList<String> merchantsNamesList = new ArrayList<>();
        MerchantTable mercantTable = new MerchantTable();
        try {
            res = stmt.executeQuery("SELECT * FROM transactions");
            while (res.next()) {
                //yyyy-MM-dd
                transactionDate = res.getString("transaction_date");
                //yyyy-MM
                transactionDate = transactionDate.substring(0, transactionDate.lastIndexOf('-'));
                //yyyy-MM == traderDate
                if (transactionDate.equals(traderDate)) {
                    merchantsNamesList.add(res.getString("merchant_name"));
                }
            }

            //Convert ArrayList to Array
            merchantsNamesArray = new String[merchantsNamesList.size()];
            for (int i = 0; i < merchantsNamesList.size(); i++) {
                merchantsNamesArray[i] = merchantsNamesList.get(i);
            }

            //Find best trader & 5% reduction
            if ((bestTrader = findBestTrader(merchantsNamesArray)) != null) {
                mercantTable.updateBestMerchant(bestTrader);
            }
        } catch (SQLException e) {
            System.err.println("Got an exception, in traderOfMonth()");
            System.err.println(e.getMessage());
        }
        return bestTrader;
    }

    /*Update returned of Transaction*/
    public void updateReturned(int transaction_id,int returned) throws SQLException, ClassNotFoundException{
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        String update="UPDATE transactions SET returned='"+returned+"' WHERE transaction_id = '"+transaction_id+"'";
        stmt.executeUpdate(update);
        con.close();
    }

    /* Returns a Transaction if exists in Database, else null */
    public Transaction databaseToTransaction(String product_name, String customer, String property, String merchant) throws ClassNotFoundException, SQLException {
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        ResultSet rs;
        try {
            rs = stmt.executeQuery("SELECT * FROM transactions WHERE product_name = '" + product_name + "' AND customer_name = '" +customer+ "' AND customer_property = '"+property+"' AND merchant_name = '"+merchant+"' AND returned = '"+0+"'");
            rs.next();
            String json = Database_Connection.getResultsToJSON(rs);
            Gson gson = new Gson();
            Transaction com = gson.fromJson(json, Transaction.class);
            return com;
        } catch (JsonSyntaxException | SQLException e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        return null;
    }

    /*Get Array List of every Transaction*/
    public ArrayList<Transaction> ArrayOfTransactions(String name,String property) throws SQLException, ClassNotFoundException {
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        ArrayList<Transaction> transactions=new ArrayList<Transaction>();
        ResultSet rs;
        try {
            if(property.equals("merchant")){
                rs = stmt.executeQuery("SELECT * FROM transactions WHERE merchant_name= '" + name + "'");
            }else{
                rs = stmt.executeQuery("SELECT * FROM transactions WHERE customer_name= '" + name + "'");
            }
            while (rs.next()) {
                String json = Database_Connection.getResultsToJSON(rs);
                Gson gson = new Gson();
                Transaction doc = gson.fromJson(json, Transaction.class);
                transactions.add(doc);
            }
            return transactions;

        } catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        return null;
    }

    /*Get Array List of every Transaction of every Employee*/
    public ArrayList<Transaction> ArrayOfEmployees(String property) throws SQLException, ClassNotFoundException {
        Connection con = Database_Connection.getConnection();
        Statement stmt = con.createStatement();
        ArrayList<Transaction> transactions=new ArrayList<Transaction>();
        ResultSet rs;
        try {
            rs = stmt.executeQuery("SELECT * FROM transactions WHERE customer_property= '" + property + "'");
            while (rs.next()) {
                String json = Database_Connection.getResultsToJSON(rs);
                Gson gson = new Gson();
                Transaction doc = gson.fromJson(json, Transaction.class);
                transactions.add(doc);
            }
            return transactions;

        } catch (Exception e) {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
        return null;
    }